#!/usr/bin/env node

var program = require('commander')
var path = require('path')
var fs = require('fs')
var inquirer = require('inquirer')
var download = require('download-git-repo')
var chalk = require('chalk')
var rm = require('rimraf').sync
var metadata = require('read-metadata')
var render = require('consolidate').handlebars.render
var Metalsmith = require('metalsmith')
var async = require('async')
var ora = require('ora')

program
    .version(require('../package').version)
    .usage('<command> [project-name]')
    .command('init')
    .description('Create a new project base on vue and webpack')
    .action(function(){
        var projectName = program.args[0]
        var inCurrent = typeof projectName==='object'||projectName==='.'
        var schemaProjectName = inCurrent?path.relative('../', process.cwd()): projectName
        var to = path.resolve(inCurrent?'.':projectName)
        var templateRepo = '2eron/vue-scaffold-template'
        if(fs.existsSync(to)){
            inquirer.prompt([{
                type: 'confirm',
                message: inCurrent?'Generate project in current directory?':'Target directory exists. Continue?',
                name: 'ok'
            }], function(answers){
                if(answers.ok){
                    start()
                }
            })
        }else{
            start()
        }

        function start(){
            var tmp = '/tmp/vue-template'
            var spinner = ora({
                text: 'Template downloading...',
                spinner: 'arrow'
            })
            spinner.start()
            // console.log(chalk.gray('Template downloading...'))
            download(templateRepo, tmp, {clone: false}, function(err){
                // console.log(chalk.green('\nTemplate download end.'))
                spinner.stop()
                generate(tmp, to, function(err){
                    if(err) throw err
                    console.log(chalk.green('Project generated successfully!'))
                    // 删除临时文件
                    rm(tmp)
                })
            })
        }
        /**
         * generate scaffold
         * @param  {String}   src
         * @param  {String}   dest
         * @param  {Function} fn
         */
        function generate(src, dest, fn){
            var template = path.join(src, 'template')
            var metaFile = path.join(src, 'meta.json')
            // var metaData = JSON.parse(fs.readFileSync(metaFile, 'utf-8'))
            var metaData = metadata.sync(metaFile)
            var promptMapping = {
                string: 'input',
                boolean: 'confirm'
            }
            metaData.schema.name.default = schemaProjectName

            Metalsmith(template)
                .use(function(files, metalsmith, callback){
                    var prompts = Object.keys(metaData.schema)
                    var msMetadata = metalsmith.metadata()
                    async.eachSeries(prompts, function(key, callback){
                        var prompt = metaData.schema[key]
                        inquirer.prompt([{
                            type: promptMapping[prompt.type],
                            name: key,
                            message: prompt.label||key,
                            default: prompt.default
                        }], function(answers){
                            msMetadata[key] = answers[key]
                            callback()
                        })
                    }, callback)
                })
                .use(function(files, metalsmith, callback){
                    var pkgName = 'package.json'
                    var pkgStr = files[pkgName].contents.toString()
                    render(pkgStr, metalsmith.metadata(), function(err, res){
                        if(err){
                            return callback(err)
                        }
                        files[pkgName].contents = new Buffer(res)
                        callback()
                    })
                })
                .source('.')
                .destination(dest)
                .build(fn)
        }
    })

/**
 * help
 */
program.on('--help', function(){
    console.log('  Examples:')
    console.log('')
    console.log('    $ vs init project-name')
    console.log('')
})

program.parse(process.argv)
if(program.args.length<1){
    return program.help()
}else{
    var len = program.args.length
    // 无效命令
    if(typeof(program.args[len-1])!=='object'){
        return program.help()
    }
}
